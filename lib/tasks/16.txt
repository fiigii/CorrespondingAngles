map 与 filter
map取一个函数和List做参数，遍历该List的每个元素来调用该函数产生一个新的List。 看下它的类型声明和实现:

map :: (a -> b) -> [a] -> [b]   
map _ [] = []   
map f (x:xs) = f x : map f xs
从这类型声明中可以看出，它取一个取a返回b的函数和一组a的List，并返回一组b。 这就是haskell的有趣之处：有时只看类型声明就能对函数的行为猜个大致。map函数多才多艺，有一百万种用法。 如下是其中一小部分:

ghci> map (+3) [1,5,3,1,6]   
[4,8,6,4,9]   
ghci> map (++ "!") ["BIFF"，"BANG"，"POW"]   
["BIFF!","BANG!","POW!"]   
ghci> map (replicate 3) [3..6]   
[[3,3,3],[4,4,4],[5,5,5],[6,6,6]]   
ghci> map (map (^2)) [[1,2],[3,4,5,6],[7,8]]   
[[1,4],[9,16,25,36],[49,64]]   
ghci> map fst [(1,2),(3,5),(6,3),(2,6),(2,5)]   
[1,3,6,2,2]
你可能会发现，以上的所有代码都可以用List Comprehension来替代。map (+3) [1,5,3,1,6]与[x+3 | x <- [1,5,3,1,6]完全等价。

filter函数取一个限制条件和一个List，返回该List中所有符合该条件的元素。 它的类型声明及实现大致如下:

filter :: (a -> Bool) -> [a] -> [a]   
filter _ [] = []   
filter p (x:xs)    
    | p x       = x : filter p xs   
    | otherwise = filter p xs
很简单。 只要p x所得的结果为真，就将这一元素加入新List，否则就无视之。几个使用范例:

ghci> filter (>3) [1,5,3,2,1,6,4,3,2,1]   
[5,6,4]   
ghci> filter (==3) [1,2,3,4,5]   
[3]   
ghci> filter even [1..10]   
[2,4,6,8,10]   
ghci> let notNull x = not (null x) in filter notNull [[1,2,3],[],[3,4,5],[2,2],[],[],[]]   
[[1,2,3],[3,4,5],[2,2]]   
ghci> filter (`elem` ['a'..'z']) "u LaUgH aT mE BeCaUsE I aM diFfeRent"   
"uagameasadifeent"   
ghci> filter (`elem` ['A'..'Z']) "i lauGh At You BecAuse u r aLL the Same"   
"GAYBALLS"
同样，以上都可以用List Comprehension的限制条件来实现。 并没有教条规定你必须在什么情况下用map和filter还是List Comprehension，选择权归你，看谁舒服用谁就是。 如果有多个限制条件，只能连着套好几个filter或用&&等逻辑函数的组合之，这时就不如list comprehension来得爽了。

还记得上一章的那个quicksort函数么? 我们用到了List Comprehension来过滤大于或小于锚的元素。 换做filter也可以实现，而且更加易读：

quicksort :: (Ord a) => [a] -> [a]     
quicksort [] = []     
quicksort (x:xs) =      
    let smallerSorted = quicksort (filter (<x) xs) 
        biggerSorted = quicksort (filter (>x) xs)    
    in  smallerSorted ++ [x] ++ biggerSorted

map和filter是每个函数式程序员的面包黄油（呃，map和filter还是List Comprehension并不重要）。 想想前面我们如何解决给定周长寻找合适直角三角形的问题的? 在命令式编程中，我们可以套上三个循环逐个测试当前的组合是否满足条件，若满足，就打印到屏幕或其他类似的输出。 而在函数式编程中，这行就都交给map和filter。 你弄个取一参数的函数，把它交给map过一遍List，再filter之找到合适的结果。 感谢haskell的惰性，即便是你多次map一个list也只会遍历一遍该list，要找出小于100000的数中最大的3829的倍数，只需过滤结果所在的list就行了.

要找出小于100000的3829的所有倍数，我们应当过滤一个已知结果所在的list.

largestDivisible :: (Integral a) => a   
largestDivisible = head (filter p [100000,99999..])   
    where p x = x `mod` 3829 == 0
首先， 取一个降序的小于100000所有数的List，然后按照限制条件过滤它。 由于这个List是降序的，所以结果List中的首个元素就是最大的那个数。 惰性再次行动! 由于我们只取这结果List的首个元素，所以它并不关心这List是有限还是无限的，在找到首个合适的结果处运算就停止了。

接下来，我们就要找出所有小于10000的奇数的平方和，得先提下takeWhile函数，它取一个限制条件和List作参数，然后从头开始遍历这一List，并返回符合限制条件的元素。 而一旦遇到不符合条件的元素，它就停止了。 如果我们要取出字符串"elephants know how to party"中的首个单词，可以takeWhile (/=' ') "elephants know how to party"，返回"elephants"。 okay，要求所有小于10000的奇数的平方的和，首先就用(^2)函数map掉这个无限的List[1..]。然后过滤之，只取奇数就是了。 在大于10000处将它断开，最后前面的所有元素加到一起。 这一切连写函数都不用，在ghci下直接搞定.

ghci> sum (takeWhile (<10000) (filter odd (map (^2) [1..])))   
166650
不错! 先从几个初始数据(表示所有自然数的无限list)，再map它，filter它，切它，直到它符合我们的要求，再将其加起来。 这用list comprehension也是可以的，而哪种方式就全看你的个人口味.

ghci> sum (takeWhile (<10000) [m | m <- [n^2 | n <- [1..]], odd m])   
166650
感谢haskell的惰性特质，这一切才得以实现。 我们之所以可以map或filter一个无限list，是因为它的操作不会被立即执行，而是拖延一下。 只有我们要求haskell交给我们sum的结果的时候，sum函数才会跟takeWhile说，它要这些数。takeWhile就再去要求filter和map行动起来，并在遇到大于等于10000时候停止.

下个问题与Collatz序列有关，取一个自然数，若为偶数就除以2。 若为奇数就乘以3再加1。 再用相同的方式处理所得的结果，得到一组数字构成的的链。 它有个性质，无论任何以任何数字开始，最终的结果都会归1。 所以若拿13当作起始数，就可以得到这样一个序列13，40，20，10，5，16，8，4，2，1。13*3+1得40，40除2得20，如是继续，得到一个10个元素的链。

好的，我们想知道的是: 以1到100之间的所有数作为起始数，会有多少个链的长度大于15?

chain :: (Integral a) => a -> [a]   
chain 1 = [1]   
chain n   
    | even n =  n:chain (n `div` 2)   
    | odd n  =  n:chain (n*3 + 1)
该链止于1，这便是边界条件。 标准的递归函数:

ghci> chain 10   
[10,5,16,8,4,2,1]   
ghci> chain 1   
[1]   
ghci> chain 30   
[30,15,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]
yay! 貌似工作良好。 现在由这个函数来告诉我们结果:

numLongChains :: Int   
numLongChains = length (filter isLong (map chain [1..100]))   
    where isLong xs = length xs > 15
我们把chain函数map到[1..100]，得到一组链的list，然后用个限制条件过滤长度大于15的链。 过滤完毕后就可以得出结果list中的元素个数.

Note: 这函数的类型为numLongChains :: Int。 这是由于历史原因，length返回一个Int而非Num的成员类型，若要得到一个更通用的Num a，我们可以使用fromInterval函数来处理所得结果.
用map，我们可以写出类似map (*) [0..]之类的代码。 如果只是为了例证柯里函数和不全调用的函数是真正的值及其原理，那就是你可以把函数传递或把函数装在list中(只是你还不能将它们转换为字符串)。 迄今为止，我们还只是map单参数的函数到list，如map (*2) [0..]可得一组类型为(Num a) => [a]的list，而map (*) [0..]也是完全没问题的。*的类型为(Num a) -> a -> a -> a，用单个参数调用二元函数会返回一个一元函数。 如果用*来map 一个[0..]的list，就会得到一组一元函数组成的list，即(Num a) => [a->a]。map (*) [0..]所得的结果写起来大约就是[(*0),(*1),(*2)..]

ghci> let listOfFuns = map (*) [0..]   
ghci> (listOfFuns !! 4) 5   
20
取所得list的第四个元素可得一函数，与(*4)等价。 然后用5调用它，与(* 4) 5或4*5都是等价的.

