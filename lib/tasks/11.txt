case表达式

有命令式编程(C, C++, Java, etc)的经验的同学一定会有所了解，很多命令式语言都提供了case语句。就是取一个变量，按照对变量的判断选择对应的代码块。其中可能会存在一个万能匹配以处理未预料的情况。

haskell取了这一概念融合其中。如其名，case表达式就是，嗯，一种表达式。跟if..else和let一样的表达式。用它可以对变量的不同情况分别求值，还可以使用模式匹配。Hmm，取一个变量，对它模式匹配，执行对应的代码块。好像在哪儿听过？啊，就是函数定义时参数的模式匹配！好吧，模式匹配本质上不过就是case语句的语法糖而已。这两段代码就是完全等价的：

head' :: [a] -> a   
head' [] = error "No head for empty lists!"   
head' (x:_) = x  
head' :: [a] -> a   
head' xs = case xs of [] -> error "No head for empty lists!"   
                      (x:_) -> x  
看得出，case表达式的语法十分简单：

case expression of pattern -> result   
                   pattern -> result   
                   pattern -> result   
                   ...  
expression匹配合适的模式。如料，第一个模式若匹配，就执行第一个代码块；否则就交给下一个模式。如果到最后依然没有匹配的模式，就会产生一个运行时错误。

函数参数的模式匹配只能在定义函数时使用，而case表达式可以用在任何地方。例如：

describeList :: [a] -> String   
describeList xs = "The list is " ++ case xs of [] -> "empty."   
                                               [x] -> "a singleton list."    
                                               xs -> "a longer list."  
这在表达式中作模式匹配很方便，由于模式匹配本质上就是case表达式的语法糖，那么写成这样也是等价的：

describeList :: [a] -> String   
describeList xs = "The list is " ++ what xs   
    where what [] = "empty."   
          what [x] = "a singleton list."   
          what xs = "a longer list."  
