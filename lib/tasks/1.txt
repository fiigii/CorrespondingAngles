启蒙：你的第一个函数
在前一节中我们简单介绍了函数的调用，现在让我们编写我们自己的函数！打开你最喜欢的编辑器，输入如下代码，它的功能就是将一个数字乘以2.

doubleMe x = x + x 
函数的声明与它的调用形式大体相同，都是先函数名，后跟由空格分隔的参数表。但在声明中一定要在 = 后面定义函数的行为。

保存为baby.hs或任意名称，然后转至保存的位置，打开ghci，执行:l baby.hs。这样我们的函数就装载成功，可以调用了。

ghci> :l baby   
[1 of 1] Compiling Main             ( baby.hs, interpreted )   
Ok, modules loaded: Main.   
ghci> doubleMe 9   
18   
ghci> doubleMe 8.3   
16.6  
+运算符对整数和浮点都可用（实际上所有有数字特征的值都可以），所以我们的函数可以处理一切数值。声明一个包含两个参数的函数如下：

doubleUs x y = x*2 + y*2  
很简单。将其写成doubleUs x y = x + x + y + y也可以。测试一下（记住要保存为baby.hs并到ghci下边执行:l baby.hs）

ghci> doubleUs 4 9  26   
ghci> doubleUs 2.3 34.2  73.0   
ghci> doubleUs 28 88 + doubleMe 123   
478
你可以在其他函数中调用你编写的函数，如此一来我们可以将doubleMe函数改为：

doubleUs x y = doubleMe x + doubleMe y  

这种情形在haskell下边十分常见：编写一些简单的函数，然后将其组合，形成一个较为复杂的函数，这样可以减少重复工作。设想若是哪天有个数学家验证说2应该是3，我们只需要将doubleMe改为x+x+x即可，由于doubleUs调用到doubleMe，于是整个程序便进入了2即是3的古怪世界。

haskell中的函数并没有顺序，所以先声明doubleUs还是先声明doubleMe都是同样的。如下，我们编写一个函数，它将小于100的数都乘以2，因为大于100的数都已经足够大了！

doubleSmallNumber x = if x > 100                           
                                     then x                           
                                     else  x*2  
接下来介绍haskell的if语句。你也许会觉得和其他语言很像，不过存在一些不同。haskell中if语句的else部分是不可省略。在命令式语言中，你可以通过if语句来跳过一段代码，而在haskell中，每个函数和表达式都要返回一个结果。对于这点我觉得将if语句置于一行之中会更易理解。haskell 中的if语句的另一个特点就是它其实是个表达式，表达式就是返回一个值的一段代码：5是个表达式，它返回5；4+8是个表达式；x+y也是个表达式，它返 回x+y的结果。正由于else是强制的，if语句一定会返回某个值，所以说if语句也是个表达式。如果要给刚刚定义的函数的结果都加上1，可以如此修改：

doubleSmallNumber' x = (if x > 100 then x else x*2) + 1 
若是去掉括号，那就会只在小于100的时候加1。注意函数名最后的那个单引号，它没有任何特殊含义，只是一个函数名的合法字符罢了。通常，我们使用单引号来区分一个稍经修改但差别不大的函数。定义这样的函数也是可以的：

conanO'Brien = "It's a-me, Conan O'Brien!"  
在这里有两点需要注意。首先就是我们没有大写conan的首字母，因为首字母大写的函数是不允许的，稍后我们将讨论其原因；另外就是这个函数并没有任何参数。没有参数的函数通常被称作“定义”（或者“名字”），一旦定义，conanO'Brien就与字符串"It's a-me, Conan O'Brien!"完全等价，且它的值不可以修改。